<?php

/**
 * @file
 * Handles the creation and display of tabular data objects.
 */

/**
 * Implements hook_menu().
 */
function islandora_data_menu() {
  $items = array();
  $items['admin/islandora/tabulardata'] = array(
    'title' => 'Tabular Data Solution Pack',
    'description' => 'Configure the Islandora Tabluar Data Solution Pack.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_data_admin_settings'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Implements hook_theme().
 */
function islandora_data_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_data' => array(
      'template' => 'theme/islandora-data',
      'pattern' => 'islandora_data__',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_data_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_data');
  // Tabular data Content Model.
  $data_content_model = $connection->repository->constructObject('islandora:sp_data');
  $data_content_model->owner = 'fedoraAdmin';
  $data_content_model->label = 'Islandora Tabular Data Content Model';
  $data_content_model->models = 'fedora-system:ContentModel-3.0';
  // ISLANDORACM Datastream.
  $datastream = $data_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_data_content_model.xml", FALSE);
  $data_content_model->ingestDatastream($datastream);
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $data_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_data_ds_composite_model.xml", FALSE);
  $data_content_model->ingestDatastream($datastream);
  // Tabular Data Collection.
  $data_collection = $connection->repository->constructObject('islandora:sp_data_collection');
  $data_collection->owner = 'fedoraAdmin';
  $data_collection->label = 'Tabular Data Collection';
  $data_collection->models = 'islandora:collectionCModel';
  $data_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $data_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_data_collection_policy.xml", FALSE);
  $data_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $data_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $data_collection->ingestDatastream($datastream);
  return array(
    'islandora_data' => array(
      'title' => 'Islandora tabular data',
      'objects' => array(
        $data_content_model,
        $data_collection,
      ),
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_data_islandora_sp_data_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_data', array('islandora_object' => $object));
  return array('' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function islandora_data_islandora_sp_data_islandora_object_ingested($object) {
  module_load_include('inc', 'islandora_data', 'includes/derivatives');
  islandora_data_create_all_derivatives($object);
}

/**
 * Implements hook_preprocess_theme().
 */
function islandora_data_preprocess_islandora_data(array &$variables) {
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  $islandora_object = $variables['islandora_object'];
  $repository = $islandora_object->repository;
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');

  if (islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['DC'])) {
    try {
      $dc = $islandora_object['DC']->content;
      $dc_object = DublinCore::importFromXMLString($dc);
    }
    catch (Exception $e) {
      drupal_set_message(t('Error retrieving object %s %t', array('%s' => $islandora_object->id, '
        %t' => $e->getMessage())), 'error', FALSE);
    }
  }
  $variables['islandora_dublin_core'] = isset($dc_object) ? $dc_object : NULL;
  $variables['dc_array'] = isset($dc_object) ? $dc_object->asArray() : array();
  $variables['islandora_object_label'] = $islandora_object->label;
  $variables['theme_hook_suggestions'][] = 'islandora_data__' . str_replace(':', '_', $islandora_object->id);
  $variables['parent_collections'] = islandora_get_parents_from_rels_ext($islandora_object);

  // Thumbnail.
  if (isset($islandora_object['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['TN'])) {
    $thumbnail_size_url = url("islandora/object/{$islandora_object->id}/datastream/TN/view");
    $params = array(
      'title' => $islandora_object->label,
      'path' => $thumbnail_size_url,
    );
    $variables['islandora_thumbnail_img'] = theme('image', $params);
  }

  // CSV datastream(s).
  // First, define a default for the return code from curl.
  $ret = 1;
  if (isset($islandora_object['OBJ']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['OBJ'])) {
    $ds_links = array();
    foreach ($islandora_object as $ds) {
      // We only want to present links to the Ethercalc URLs for datastreams that begin with 'CSV_DATA'.
      // There will be one per worksheet in the Excel and OpenOffice files.
      if (preg_match('/^CSV_DATA/', $ds->id)) {

        $ethercalc_host = variable_get('islandora_data_solution_pack_ethercalc_host', 'http://example.com:8000');

        // Download the datastream and save it to a temp file so we can POST it to ethercalc.
        $current_process_id = getmypid();
        $ds_content_file_path = '/tmp/' . $ds->id . '.' . $current_process_id;
        $ds->getContent($ds_content_file_path);
        $ds_content_file_size = filesize($ds_content_file_path);
        $ds_content_file_handle = fopen($ds_content_file_path, "rb");

        // PHP Curl POST:
        $curl_instance = curl_init();

        // Don't try posting if the file is extremely large; Ethercalc will hang
        if ($ds_content_file_size <= 52428700) {
          curl_setopt($curl_instance, CURLOPT_URL, $ethercalc_host.'/_');
          curl_setopt($curl_instance, CURLOPT_POST, 1);
          curl_setopt($curl_instance, CURLOPT_POSTFIELDS, file_get_contents($ds_content_file_path));
          curl_setopt($curl_instance, CURLOPT_HEADER, 1);
          curl_setopt($curl_instance, CURLOPT_HTTPHEADER, array("Content-Type: text/csv"));
          curl_setopt($curl_instance, CURLOPT_RETURNTRANSFER, 1);
          $output = curl_exec($curl_instance);
          $curl_ran = 1;

          $ethercalc_path = islandora_data_get_response_header($output, 'Location');
        }
        // 2) Ethercalc renders a Javascript viewer at curl http://example.com:8000/zmy8gm660u, which we
        // want to appear in a new browser tab. If curl executed successfully, render links to the
        // Ethercalc URLs.
        if(curl_errno($curl_instance)==0 && $curl_ran==1) {
          $link = l(t("View @ds_label in Ethercalc", array('@ds_label' => $ds->label) ),
            url($ethercalc_host . $ethercalc_path,
            array('absolute' => TRUE, 'external' => TRUE)),
            array('attributes' => array('target' => '_blank', 'title' => t('Opens Ethercalc in a new tab')))
          );
        }
        // If curl didn't execute successfully, render links to download the raw CSV files.
        else {
          $link = l(t("Download @dsid", array('@dsid' => $ds->id)),
            islandora_datastream_get_url($ds, $type = 'download')
          );
        }

        $ds_links[] = $link;

        // Clean up the temp file containing the datastream content.
        file_unmanaged_delete($ds_content_file_path);

        // If curl executed successfully, just render the links.
    if(curl_errno($curl_instance)==0 && $curl_ran==1) {
      $variables['islandora_content'] = theme('item_list', array('items' => $ds_links,
        'title' => t('CSV files, one per worksheet'), 'type' => 'ul', 'attributes' => array()));
    }
    // If curl didn't execute successfully, render a note to the user and the links to download the raw CSV files.
    else {
      if (count($ds_links) == 1) {
        $variables['islandora_content'] = '<div class="messages warning">' .
          t("Sorry, we can't display your CSV file in the browser -- either it's too large, or we're encountering some technical difficulties. You can download it using the link below.") . '</div>';
      }
      else {
        $variables['islandora_content'] = '<div class="messages warning">' .
          t("Sorry, we can't display at least one of your CSV files in the browser -- either they're too large, or we're encountering some technical difficulties. You can download them using the links below.") . '</div>';
      }
      $variables['islandora_content'] .= theme('item_list', array('items' => $ds_links,
        'title' => t('CSV files, one per worksheet'), 'type' => 'ul', 'attributes' => array()));
      }
      curl_close($curl_instance);
    }

    }
  }
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 */
function islandora_data_islandora_content_model_forms_form_associations() {
  return array(
    'islandora_data_mods_form' => array(
      'content_model' => 'islandora:sp_data',
      'form_name' => 'Basic tabular data MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_data_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_data');
  return array(
    'Basic tabular data MODS form' => array(
      'form_file' => "$module_path/xml/islandora_data_form_mods.xml",
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_data_islandora_sp_data_islandora_ingest_steps() {
  return array(
    'islandora_data' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_data_upload_form',
      'module' => 'islandora_data',
      'file' => 'includes/data_upload.form.inc',
    ),
  );
}

/**
 * Parses out a specific header value from the HTTP response.
 *
 * @param string $curl_result
 *   The entire cURL result, as provided by curl_exec() with
 *   curl_setopt($curl_instance, CURLOPT_RETURNTRANSFER, 1).
 * @param string $wanted_header
 *   The name of the header whose value you want, without the
 *   trailing colon (:).
 * @return bool|string
 *   The value of the header, FALSE if header not found.
 */
function islandora_data_get_response_header($curl_result, $wanted_header) {
  list($headers, $content) = explode("\r\n\r\n", $curl_result, 2);
  foreach (explode("\r\n", $headers) as $header) {
    if (preg_match('/'. preg_quote($wanted_header) . '/', $header)) {
      $header_value = str_replace($wanted_header . ':', '', $header);
      $cleaned_underscore = str_replace('_/','', $header_value);
      return trim($cleaned_underscore);
    }
  }
}
